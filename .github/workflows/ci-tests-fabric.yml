name: Test Fabric

# see: https://help.github.com/en/actions/reference/events-that-trigger-workflows
on:
  push:
    branches: [master, "release/*"]
  pull_request:
    branches: [master, "release/*"]
    types: [opened, reopened, ready_for_review, synchronize] # added `ready_for_review` since draft is skipped
    paths:
      - ".actions/*"
      - "requirements/ci.txt"
      - "requirements/fabric/**"
      - "src/lightning/fabric/**"
      - "src/lightning_fabric/*"
      - "tests/tests_fabric/**"
      - "pyproject.toml" # includes pytest config
      - ".github/workflows/ci-tests-fabric.yml"
      - "!requirements/*/docs.txt"
      - "!*.md"
      - "!**/*.md"
  schedule:
    # At the end of every day
    - cron: "0 0 * * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

defaults:
  run:
    shell: bash

jobs:
  fabric-cpu:
    runs-on: ${{ matrix.os }}
    if: github.event.pull_request.draft == false
    strategy:
      fail-fast: false
      matrix:
        os: [macOS-14, ubuntu-22.04, windows-2022]
        config:
          # only run PyTorch latest
          - { pkg-name: "lightning", python-version: "3.10", pytorch-version: "2.1" }
          - { pkg-name: "lightning", python-version: "3.11", pytorch-version: "2.2.2" }
          - { pkg-name: "lightning", python-version: "3.11", pytorch-version: "2.3" }
          - { pkg-name: "lightning", python-version: "3.12.7", pytorch-version: "2.4.1" }
          - { pkg-name: "lightning", python-version: "3.12.7", pytorch-version: "2.5.1" }

          # only run PyTorch latest with Python latest, use Fabric scope to limit dependency issues
          - { pkg-name: "fabric", python-version: "3.12.7", pytorch-version: "2.6" }

          # "fabric" installs the standalone package
          - { pkg-name: "fabric", python-version: "3.10", pytorch-version: "2.7" }

          # adding recently cut Torch 2.7 - FUTURE
          - { pkg-name: "fabric", python-version: "3.12", pytorch-version: "2.8" }

          # "oldest" versions tests, only on minimum Python
          - { pkg-name: "fabric", pytorch-version: "2.1", requires: "oldest" }
    timeout-minutes: 25 # because of building grpcio on Mac
    env:
      PACKAGE_NAME: ${{ matrix.config.pkg-name }}
      FREEZE_REQUIREMENTS: ${{ ! (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/')) }}
      TORCH_URL_STABLE: "https://download.pytorch.org/whl/cpu/"
      TORCH_URL_TEST: "https://download.pytorch.org/whl/test/cpu/"
      # TODO: Remove this - Enable running MPS tests on this platform
      DISABLE_MPS: ${{ matrix.os == 'macOS-14' && '1' || '0' }}
      UV_TORCH_BACKEND: "cpu"
    steps:
      - uses: actions/checkout@v5

      - name: Install uv and set Python version
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.config.python-version || '3.9' }}
          # TODO: Avoid activating environment like this
          # see: https://github.com/astral-sh/setup-uv/tree/v6/?tab=readme-ov-file#activate-environment
          activate-environment: true
          enable-cache: true

      - name: Basic setup
        run: uv pip install -q -r .actions/requirements.txt

      - name: Append Env. vars for Linux
        if: ${{ runner.os == 'Linux' }}
        run: echo "GLOO_SOCKET_IFNAME=eth0" >> $GITHUB_ENV

      - name: Append Env. vars for MacOS
        if: ${{ runner.os == 'macOS' }}
        run: echo "GLOO_SOCKET_IFNAME=lo0" >> $GITHUB_ENV

      - name: Append Env. vars for Windows
        if: ${{ runner.os == 'windows' }}
        run: |
          # Avoid issue on Windows with PyTorch 2.4: "RuntimeError: use_libuv was requested but PyTorch was build without libuv support"
          echo "USE_LIBUV=0" >> $GITHUB_ENV

      - name: Set min. dependencies
        if: ${{ matrix.config.requires == 'oldest' }}
        run: |
          uv pip install -U "lightning-utilities[cli]"
          python -m lightning_utilities.cli requirements set-oldest \
            --req_files "['requirements/fabric/base.txt', 'requirements/fabric/strategies.txt', 'requirements/fabric/test.txt']"
          uv pip install "cython<3.0" wheel
          uv pip install "pyyaml==5.4" --no-build-isolation
          # This script removes any line containing "error::FutureWarning" from pyproject.toml
          uv pip install -r requirements/ci.txt
          python .actions/assistant.py prune_pytest_as_errors

      - name: Adjust PyTorch versions in requirements files
        if: ${{ matrix.config.requires != 'oldest' }}
        run: |
          uv pip install -q -r requirements/ci.txt
          python -m wget https://raw.githubusercontent.com/Lightning-AI/utilities/main/scripts/adjust-torch-versions.py
          for fpath in `ls requirements/**/*.txt`; do \
            python ./adjust-torch-versions.py $fpath ${{ matrix.config.pytorch-version }}; \
          done

      - name: Expand Env. variables
        run: |
          # Switch PyTorch URL between stable and test/future
          python -c "print('TORCH_URL=' + str('${{env.TORCH_URL_TEST}}' if '${{ matrix.config.pytorch-version }}' == '2.7' else '${{env.TORCH_URL_STABLE}}'))" >> $GITHUB_ENV
          # Switch coverage scope
          python -c "print('COVERAGE_SCOPE=' + str('lightning' if '${{matrix.config.pkg-name}}' == 'lightning' else 'lightning_fabric'))" >> $GITHUB_ENV
          # if you install mono-package set dependency only for this subpackage
          python -c "print('EXTRA_PREFIX=' + str('' if '${{matrix.config.pkg-name}}' != 'lightning' else 'fabric-'))" >> $GITHUB_ENV

      - name: Install package & dependencies
        timeout-minutes: 20
        run: |
          uv pip install ".[${EXTRA_PREFIX}test,${EXTRA_PREFIX}strategies]" \
            --upgrade \
            --find-links="${TORCH_URL}"
          uv pip list

      - name: Dump handy wheels
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        continue-on-error: true
        uses: ./.github/actions/pip-wheels
        with:
          wheel-dir: ${{ env.PYPI_CACHE_DIR }}
          torch-url: ${{ env.TORCH_URL }}
          cache-key: "pypi_wheels"

      - name: Adjust tests
        if: ${{ matrix.config.pkg-name != 'lightning' }}
        run: |
          python .actions/assistant.py copy_replace_imports --source_dir="./tests" \
            --source_import="lightning.fabric" --target_import="lightning_fabric"

      - name: Testing Warnings
        working-directory: tests/tests_fabric
        # needs to run outside `pytest`
        run: python utilities/test_warnings.py

      - name: Testing Fabric
        working-directory: tests/tests_fabric
        # NOTE: do not include coverage report here, see: https://github.com/nedbat/coveragepy/issues/1003
        run: |
          echo $GITHUB_RUN_ID
          python -m coverage run --source ${{ env.COVERAGE_SCOPE }} \
            -m pytest -v --timeout=60 --durations=50 --random-order-seed=$GITHUB_RUN_ID \
            --junitxml=junit.xml -o junit_family=legacy  # NOTE: for Codecov's test results

      - name: Statistics
        if: success()
        working-directory: tests/tests_fabric
        run: |
          coverage report
          coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        # see: https://github.com/actions/toolkit/issues/399
        continue-on-error: true
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: tests/tests_fabric/coverage.xml
          flags: ${{ env.COVERAGE_SCOPE }},cpu,pytest,python${{ matrix.config.python-version }}
          name: CPU-coverage
          fail_ci_if_error: false

      - name: Minimize uv cache
        run: uv cache prune --ci

  fabric-cpu-guardian:
    runs-on: ubuntu-latest
    needs: fabric-cpu
    if: always()
    steps:
      - run: echo "${{ needs.fabric-cpu.result }}"
      - name: failing...
        if: needs.fabric-cpu.result == 'failure'
        run: exit 1
      - name: cancelled or skipped...
        if: contains(fromJSON('["cancelled", "skipped"]'), needs.fabric-cpu.result)
        timeout-minutes: 1
        run: sleep 90
