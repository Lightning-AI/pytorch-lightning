trigger:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

timeout: "55" # minutes
parametrize:
  matrix: {}
  include:
    # note that this is setting also all oldest requirements which is linked to Torch == 2.1
    - image: "nvidia/cuda:12.1.1-devel-ubuntu22.04"
      PACKAGE_NAME: "fabric"
      python_version: "3.10"
      machine: "A100_X_2"
    - image: "nvidia/cuda:12.6-devel-ubuntu22.04"
      PACKAGE_NAME: "fabric"
      python_version: "3.12"
      machine: "L4_X_2"
    # - image: "nvidia/cuda:12.6-devel-ubuntu22.04"
    #   PACKAGE_NAME: "fabric"
    - image: "nvidia/cuda:12.6-devel-ubuntu22.04"
      PACKAGE_NAME: "lightning"
      python_version: "3.12"
      machine: "L4_X_2"
  exclude: []

env:
  FREEZE_REQUIREMENTS: "1"
  RUN_ONLY_CUDA_TESTS: "1"
  CUDA_LAUNCH_BLOCKING: "1"
  NCCL_DEBUG: "INFO"

run: |
  # Install Python and UV
  apt-get update && apt-get install -y python${python_version} python${python_version}-venv python${python_version}-dev curl
  ln -sf /usr/bin/python${python_version} /usr/bin/python
  curl -LsSf https://astral.sh/uv/install.sh | sh
  export PATH="$HOME/.cargo/bin:$PATH"

  whereis nvidia
  nvidia-smi
  python --version
  uv --version
  uv pip install fire wget packaging
  uv pip list
  set -ex

  CUDA_VERSION="${image##*cuda}" # Remove everything up to and including "cuda"
  echo "Using CUDA version: ${CUDA_VERSION}"
  CUDA_VERSION_M_M="${cuda_version%.*}" # Get major.minor by removing the last dot and everything after
  CUDA_VERSION_MM="${CUDA_VERSION_M_M//'.'/''}"
  TORCH_URL="https://download.pytorch.org/whl/cu${CUDA_VERSION_MM}/torch_stable.html"
  echo "Torch URL: ${TORCH_URL}"
  COVERAGE_SOURCE=$(python -c 'n = "$(PACKAGE_NAME)" ; print(dict(fabric="lightning_fabric").get(n, n))')
  echo "collecting coverage for: ${COVERAGE_SOURCE}"
  TORCH_VER=$(python -c "import torch; print(torch.__version__.rsplit('.', 1)[0])")

  if [ "${python_version}" == "3.10" ]; then
    echo "Set oldest versions"
    uv pip uninstall deepspeed
    uv pip install --upgrade "lightning-utilities[cli]"
    cd requirements/fabric
    python -m lightning_utilities.cli requirements set-oldest --req_files "['base.txt', 'strategies.txt']"
    python -m lightning_utilities.cli requirements prune-pkgs --packages deepspeed --req_files strategies.txt
    cd ../..
    uv pip install "cython<3.0" wheel  # for compatibility
  fi

  echo "Adjust torch versions in requirements files"
  PYTORCH_VERSION=$(python -c "import torch; print(torch.__version__.split('+')[0])")
  uv pip install wget packaging
  python -m wget https://raw.githubusercontent.com/Lightning-AI/utilities/main/scripts/adjust-torch-versions.py
  for fpath in `ls requirements/**/*.txt`; do \
    python ./adjust-torch-versions.py $fpath ${PYTORCH_VERSION}; \
  done

  if [ "${PACKAGE_NAME}" == "fabric" ]; then
    echo "Replaced PL imports"
    uv pip install --upgrade -r .actions/requirements.txt
    python .actions/assistant.py copy_replace_imports --source_dir="./tests/tests_fabric" \
      --source_import="lightning.fabric" \
      --target_import="lightning_fabric"
    python .actions/assistant.py copy_replace_imports --source_dir="./examples/fabric" \
      --source_import="lightning.fabric" \
      --target_import="lightning_fabric"
  fi

  extra=$(python -c "print({'lightning': 'fabric-'}.get('$(PACKAGE_NAME)', ''))")
  uv pip install -e ".[${extra}dev]" --upgrade --find-links="${TORCH_URL}"

  python requirements/collect_env_details.py
  python -c "import torch ; mgpu = torch.cuda.device_count() ; assert mgpu >= 2, f'GPU: {mgpu}'"
  python requirements/pytorch/check-avail-extras.py
  python -c "import bitsandbytes"

  echo "Testing: Fabric doctests"
  if [ "${PACKAGE_NAME}" == "fabric" ]; then
    cd src/
    python -m pytest lightning_fabric
    cd ..
  fi

  cd tests/
  echo "Testing: fabric standard"
  python -m coverage run --source ${COVERAGE_SOURCE} -m pytest tests_fabric/ -v --durations=50

  echo "Testing: fabric standalone"
  export PL_RUN_STANDALONE_TESTS=1
  wget https://raw.githubusercontent.com/Lightning-AI/utilities/main/scripts/run_standalone_tests.sh
  bash ./run_standalone_tests.sh "tests_fabric"
  export PL_RUN_STANDALONE_TESTS=0

  #  echo "Reporting coverage" # todo
  #  python -m coverage report
  #  python -m coverage xml
  #  python -m coverage html

  # TODO: enable coverage
  #  # https://docs.codecov.com/docs/codecov-uploader
  #  curl -Os https://uploader.codecov.io/latest/linux/codecov
  #  chmod +x codecov
  #  ./codecov --token=$(CODECOV_TOKEN) --commit=$(Build.SourceVersion) \
  #    --flags=gpu,pytest,${COVERAGE_SOURCE} --name="GPU-coverage" --env=linux,azure
  #  ls -l
  cd ..

  echo "Testing: fabric examples"
  cd examples/
  bash run_fabric_examples.sh --accelerator=cuda --devices=1
  bash run_fabric_examples.sh --accelerator=cuda --devices=2 --strategy ddp
