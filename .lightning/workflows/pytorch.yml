trigger:
  push:
    branches: ["master", "release/stable"]
  pull_request:
    branches: ["master", "release/stable"]

timeout: "60" # minutes
machine: "L4_X_2"
image: "nvidia/cuda:12.6.3-devel-ubuntu22.04"
parametrize:
  matrix: {}
  include:
    # note that this also sets oldest requirements which are linked to Python == 3.10
    - image: "nvidia/cuda:12.1.1-devel-ubuntu22.04"
      PACKAGE_NAME: "pytorch"
      python_version: "3.10"
    - PACKAGE_NAME: "pytorch"
      python_version: "3.12"
    #- image: "nvidia/cuda:12.6.3-devel-ubuntu22.04"
    #  PACKAGE_NAME: "pytorch"
    - PACKAGE_NAME: "lightning"
      python_version: "3.12"
  exclude: []

env:
  TZ: "Etc/UTC"
  DEBIAN_FRONTEND: "noninteractive"
  CUDA_TOOLKIT_ROOT_DIR: "/usr/local/cuda"
  MKL_THREADING_LAYER: "GNU"
  CUDA_LAUNCH_BLOCKING: "1"
  NCCL_DEBUG: "INFO"
  TORCHDYNAMO_VERBOSE: "1"
  FREEZE_REQUIREMENTS: "1"
  RUN_ONLY_CUDA_TESTS: "1"

run: |
  echo "Installing dependencies"
  apt-get update -qq --fix-missing -o=Dpkg::Use-Pty=0 &> /dev/null
  apt-get install -q -y software-properties-common curl
  echo "Add deadsnakes PPA for newer Python versions if needed"
  add-apt-repository ppa:deadsnakes/ppa -y
  apt-get update -qq --fix-missing -o=Dpkg::Use-Pty=0 &> /dev/null
  echo "Install Python ${python_version} and other dependencies"
  apt-get install -q -y --no-install-recommends --allow-downgrades --allow-change-held-packages \
        build-essential \
        pkg-config \
        cmake \
        ca-certificates \
        libopenmpi-dev \
        openmpi-bin \
        ninja-build \
        libnccl2 \
        libnccl-dev \
        unzip

  echo "Install Python ${python_version} and UV"
  apt-get install -y python${python_version} python${python_version}-venv python${python_version}-dev
  ln -sf /usr/bin/python${python_version} /usr/bin/python
  curl -LsSf https://astral.sh/uv/install.sh | sh

  echo "Source the environment and ensure UV is in PATH"
  [ -f "$HOME/.local/bin/env" ] && . "$HOME/.local/bin/env"
  export PATH="$HOME/.local/bin:$PATH"
  source $HOME/.cargo/env 2>/dev/null || true
  export PATH="$HOME/.cargo/bin:$PATH"

  echo "Verify UV installation"
  command -v uv || (echo "UV not found in PATH" && exit 1)
  # Create and activate a local uv virtual environment
  uv venv .venv -p "/usr/bin/python${python_version}" || uv venv .venv -p "python${python_version}" || uv venv .venv
  . .venv/bin/activate
  hash -r

  echo "Show system information"
  whereis nvidia
  nvidia-smi
  python --version
  uv --version
  uv pip list
  set -ex

  # Parse CUDA version from image tag, e.g., "nvidia/cuda:12.6.3-runtime-ubuntu22.04"
  IMAGE_TAG="${image##*:}"  # "12.6.3-runtime-ubuntu22.04"
  CUDA_VERSION="${IMAGE_TAG%%-*}"  # "12.6.3"
  echo "Using CUDA version: ${CUDA_VERSION}"
  CUDA_VERSION_M_M="${CUDA_VERSION%.*}"  # "12.6"
  CUDA_VERSION_MM="${CUDA_VERSION_M_M//./}"  # "126"
  export UV_TORCH_BACKEND=cu${CUDA_VERSION_MM}
  COVERAGE_SOURCE=$(python -c 'n = "$(PACKAGE_NAME)" ; print(dict(fabric="pytorch_lightning").get(n, n))')
  echo "collecting coverage for: ${COVERAGE_SOURCE}"

  uv pip install -q fire wget packaging "lightning-utilities[cli]"
  if [ "${python_version}" == "3.10" ]; then
    echo "Set oldest versions"
    cd requirements/pytorch
    python -m lightning_utilities.cli requirements set-oldest --req_files "['base.txt', 'extra.txt', 'strategies.txt', 'examples.txt']"
    python -m lightning_utilities.cli requirements prune-pkgs --packages deepspeed --req_files strategies.txt
    cd ../..
    uv pip install "cython<3.0" wheel  # for compatibility
  fi

  echo "Install the base so we can adjust other packages"
  uv pip install .
  echo "Adjust torch versions in requirements files"
  PYTORCH_VERSION=$(python -c "import torch; print(torch.__version__.split('+')[0])")
  uv pip install -q wget packaging
  python -m wget https://raw.githubusercontent.com/Lightning-AI/utilities/main/scripts/adjust-torch-versions.py
  for fpath in `ls requirements/**/*.txt`; do \
    python ./adjust-torch-versions.py $fpath ${PYTORCH_VERSION}; \
  done

  if [ "${PACKAGE_NAME}" == "pytorch" ]; then
    echo "Adjust PL imports"
    uv pip install --upgrade -r .actions/requirements.txt
    python .actions/assistant.py copy_replace_imports --source_dir="./tests/tests_pytorch" \
      --source_import="lightning.fabric,lightning.pytorch" \
      --target_import="lightning_fabric,pytorch_lightning"
    python .actions/assistant.py copy_replace_imports --source_dir="./examples/pytorch/basics" \
      --source_import="lightning.fabric,lightning.pytorch" \
      --target_import="lightning_fabric,pytorch_lightning"
  fi

  echo "Install package"
  extra=$(python -c "print({'lightning': 'pytorch-'}.get('$(PACKAGE_NAME)', ''))")
  uv pip install -e ".[${extra}dev]" --upgrade

  echo "Ensure only a single package is installed"
  if [ "${PACKAGE_NAME}" == "pytorch" ]; then
    echo "uninstall lightning to have just single package"
    uv pip uninstall lightning
  elif [ "${PACKAGE_NAME}" == "lightning" ]; then
    echo "uninstall PL to have just single package"
    uv pip uninstall pytorch-lightning
  fi

  python requirements/collect_env_details.py
  python -c "import torch ; mgpu = torch.cuda.device_count() ; assert mgpu >= 2, f'GPU: {mgpu}'"
  python requirements/pytorch/check-avail-extras.py
  python -c "import bitsandbytes"

  echo "Testing: Pytorch doctests"
  if [ "${PACKAGE_NAME}" == "pytorch" ]; then
    cd src/
    python -m pytest pytorch_lightning
    cd ..
  fi

  echo "Get legacy checkpoints"
  bash .actions/pull_legacy_checkpoints.sh
  cd tests/legacy
  # bash generate_checkpoints.sh
  ls -lh checkpoints/
  cd ../..

  cd tests/
  echo "Testing: fabric standard"
  python -m coverage run --source ${COVERAGE_SOURCE} -m pytest tests_pytorch/ -v --durations=50

  echo "Testing: fabric standalone"
  export PL_USE_MOCKED_MNIST=1
  export PL_RUN_STANDALONE_TESTS=1
  python -m wget https://raw.githubusercontent.com/Lightning-AI/utilities/main/scripts/run_standalone_tests.sh
  bash ./run_standalone_tests.sh "tests_pytorch"
  export PL_RUN_STANDALONE_TESTS=0

  echo "Testing: PyTorch standalone tasks"
  cd tests_pytorch/
  bash run_standalone_tasks.sh

  # echo "Reporting coverage" # todo
  #  python -m coverage report
  #  python -m coverage xml
  #  python -m coverage html

  # TODO: enable coverage
  #  # https://docs.codecov.com/docs/codecov-uploader
  #  curl -Os https://uploader.codecov.io/latest/linux/codecov
  #  chmod +x codecov
  #  ./codecov --token=$(CODECOV_TOKEN) --commit=$(Build.SourceVersion) \
  #    --flags=gpu,pytest,${COVERAGE_SOURCE} --name="GPU-coverage" --env=linux,azure
  #  ls -l
  cd ../..

  echo "Testing: PyTorch examples"
  cd examples/
  bash run_pl_examples.sh --trainer.accelerator=gpu --trainer.devices=1
  bash run_pl_examples.sh --trainer.accelerator=gpu --trainer.devices=2 --trainer.strategy=ddp
  bash run_pl_examples.sh --trainer.accelerator=gpu --trainer.devices=2 --trainer.strategy=ddp --trainer.precision=16
